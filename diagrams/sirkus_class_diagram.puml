@startuml
abstract "::OptionsBuilder<OptionsType>" as C_0010297816924814687483
abstract C_0010297816924814687483 {
+~OptionsBuilder() = default : void
..
{abstract} +buildOptions(const OptionsType & initialOptions) = 0 : OptionsType
+buildOptions() : OptionsType
__
}
class "::Steinberg::Vst::IComponent" as C_0015942621786670394164
class C_0015942621786670394164 {
__
}
class "::Steinberg::FUnknown" as C_0002787097806347503156
class C_0002787097806347503156 {
__
}
class "::ARA::ARAFactory" as C_0001012517098737117509
class C_0001012517098737117509 {
__
}
class "Core::Scale" as C_0016821419841954520522
class C_0016821419841954520522 {
+Scale() : void
+Scale(Type scaleType, uint8_t rootNote = 0) : void
+Scale(const std::vector<uint8_t> & scaleNotes, uint8_t rootNote = 0) : void
..
{static} -applyRootToScale(const uint8_t * scale, size_t size, uint8_t root) : std::vector<uint8_t>
+getDegrees() const : const std::vector<uint8_t> &
+getName() const : std::string
+getRoot() const : uint8_t
+getType() const : Type
+quantizeDown(uint8_t note) const : uint8_t
+quantizeNearest(uint8_t note) const : uint8_t
+quantizeRandom(uint8_t note) const : uint8_t
+quantizeUp(uint8_t note) const : uint8_t
+setCustomDegrees(const std::vector<uint8_t> & newDegrees) : void
+setRoot(uint8_t newRoot) : void
+setType(Type newType) : void
-updateDegrees() : void
__
{static} +BLUES : const std::array<uint8_t,6>
{static} +CHROMATIC : const std::array<uint8_t,12>
{static} +DORIAN : const std::array<uint8_t,7>
{static} +HARMONIC_MINOR : const std::array<uint8_t,7>
{static} +LOCRIAN : const std::array<uint8_t,7>
{static} +LYDIAN : const std::array<uint8_t,7>
{static} +MAJOR_SCALE : const std::array<uint8_t,7>
{static} +MELODIC_MINOR : const std::array<uint8_t,7>
{static} +MINOR_SCALE : const std::array<uint8_t,7>
{static} +MIXOLYDIAN : const std::array<uint8_t,7>
{static} +PENTATONIC_MAJOR : const std::array<uint8_t,5>
{static} +PENTATONIC_MINOR : const std::array<uint8_t,5>
{static} +PHRYGIAN : const std::array<uint8_t,7>
-degrees : std::vector<uint8_t>
-root : uint8_t
-type : Type
}
enum "Core::Scale::Type" as C_0003593103974725905685
enum C_0003593103974725905685 {
Major
Minor
HarmonicMinor
MelodicMinor
Dorian
Phrygian
Lydian
Mixolydian
Locrian
PentatonicMajor
PentatonicMinor
Blues
Chromatic
Custom
}
enum "Core::ScaleMode" as C_0003161580071859362439
enum C_0003161580071859362439 {
Off
QuantizeUp
QuantizeDown
QuantizeRandom
}
class "Core::TrackInfo" as C_0003828068192374320393
class C_0003828068192374320393 {
__
+id : uint32_t
+midiChannel : uint8_t
+scaleMode : ScaleMode
}
enum "Core::TimeDivision" as C_0009414825008097351890
enum C_0009414825008097351890 {
HundredTwentyEighthNote
DottedHundredTwentyEighthNote
TripletHundredTwentyEighthNote
SixtyFourthNote
DottedSixtyFourthNote
TripletSixtyFourthNote
ThirtySecondNote
DottedThirtySecondNote
TripletThirtySecondNote
SixteenthNote
DottedSixteenthNote
TripletSixteenthNote
EighthNote
DottedEighthNote
TripletEighthNote
QuarterNote
DottedQuarterNote
TripletQuarterNote
HalfNote
DottedHalfNote
TripletHalfNote
WholeNote
DottedWholeNote
TripletWholeNote
TwoBars
FourBars
}
enum "Core::NoteLength" as C_0008781438102073861438
enum C_0008781438102073861438 {
OneTwentyEighth
Sixty4th
Thirty2nd
Sixteen
Eighth
Quarter
Half
Whole
TwoBars
FourBars
EightBars
SixteenBars
}
class "Core::MusicalPosition" as C_0017162824566456018718
class C_0017162824566456018718 {
+operator==(const MusicalPosition & other) const : bool
__
+bar : int
+beat : int
+tick : double
}
class "Core::TimingInfo" as C_0008892747186919486775
class C_0008892747186919486775 {
{static} +fromInternalTransport(const InternalTransport & transport) : TimingInfo
{static} +fromPositionInfo(const juce::AudioPlayHead::PositionInfo & pos) : TimingInfo
__
+bpm : std::optional<double>
+isPlaying : bool
+musicalPosition : std::optional<MusicalPosition>
+ppqPosition : std::optional<double>
+timeSignature : std::optional<std::pair<int,int>>
}
class "Core::InternalTransport" as C_0014923543885965065796
class C_0014923543885965065796 {
+InternalTransport() : void
..
-beatsToNextBar(const MusicalPosition & pos) const : double
+getTimingInfo() const : TimingInfo
+isPlaying() const : bool
-ppqPositionToBeats(double ppq) const : double
+prepare(double sampleRate) : void
+processBlock(int numSamples) : void
+setBpm(double newBpm) : void
+setPositionInBars(int bar, int beat = 1, double tick = 0.0) : void
+setTimeSignature(int numerator, int denominator) : void
+start() : void
+stop() : void
-updateMusicalPosition() : void
-updateTimingInfo() : void
__
-bpm : double
-musicalPosition : MusicalPosition
-playing : bool
-ppqPosition : double
-sampleRate : double
-samplesPerQuarterNote : double
-timeSigDenominator : int
-timeSigNumerator : int
}
class "Core::TimingManager" as C_0007535760439577940486
class C_0007535760439577940486 {
+TimingManager() : void
..
+getBpm() const : std::optional<double>
+getMusicalPosition() const : std::optional<MusicalPosition>
+getPpqPosition() const : std::optional<double>
+getTimeSignature() const : std::optional<std::pair<int,int>>
+isHostSyncEnabled() const : bool
+isPlaying() const : bool
+isStandaloneMode() const : bool
+prepare(double sampleRate) : void
+processBlock(const juce::AudioPlayHead * playHead, int numSamples) : void
+setBpm(double newBpm) : void
+setHostSyncEnabled(bool enabled) : void
+setPositionInBars(const int bar, const int beat = 1, const double tick = 0.0) : void
+setTimeSignature(int numerator, int denominator) : void
+start() : void
+stop() : void
-updateHostPositionInfo(const juce::AudioPlayHead::PositionInfo & pos) : void
__
-currentTiming : TimingInfo
-hostSyncEnabled : bool
-internalTransport : InternalTransport
-standaloneMode : bool
}
class "Core::StepProcessor" as C_0009130430079672521979
class C_0009130430079672521979 {
+StepProcessor() : void
-StepProcessor(const StepProcessor &) = deleted : void
+~StepProcessor() : void
..
-operator=(const StepProcessor &) = deleted : StepProcessor &
..
{static} -getLeakedObjectClassName() noexcept : const char *
{static} -processStep(const Step & step, const TrackInfo & trackInfo, const Scale & scale, int triggerTick, int startTick, int numTicks, juce::MidiBuffer & midiOut) : void
+processSteps(const std::vector<std::pair<int,const Step *>> & steps, const TrackInfo & trackInfo, const Scale & scale, int startTick, int numTicks, juce::MidiBuffer & midiOut) : void
__
-leakDetector41 : juce::LeakedObjectDetector<StepProcessor>
}
class "Core::TypedProperty<T>" as C_0013521205381721934084
class C_0013521205381721934084 {
+TypedProperty(const juce::Identifier & identifier, T defaultVal) : void
__
+defaultValue : const T
+id : const juce::Identifier
}
class "Core::ValueTreeObject" as C_0007678414277767949348
class C_0007678414277767949348 {
#ValueTreeObject(ValueTree parentState, const Identifier & type, UndoManager & undoManagerToUse, int index = -1) : void
#ValueTreeObject(ValueTree existingState, UndoManager & undoManagerToUse) : void
#ValueTreeObject(const ValueTreeObject & other) : void
#~ValueTreeObject() : void
..
#operator=(const ValueTreeObject & other) : ValueTreeObject &
..
+getProperty<T>(const Identifier & id, T defaultValue) const : T
+getProperty<T>(const TypedProperty<T> & property) const : T
#initProperty<T>(const TypedProperty<T> & property) : void
+setProperty<T>(const Identifier & id, T value) : void
+setProperty<T>(const TypedProperty<T> & property, T value) : void
#valueTreeChildAdded(ValueTree & parentTree, ValueTree & childWhichHasBeenAdded) : void
#valueTreePropertyChanged(ValueTree & treeWhosePropertyHasChanged, const Identifier & property) : void
__
#state : ValueTree
#undoManager : UndoManager &
}
class "Core::Step" as C_0015922229309002665142
class C_0015922229309002665142 {
+Step(ValueTree parentState, UndoManager & undoManagerToUse, int index) : void
+Step(ValueTree existingState, UndoManager & undoManagerToUse, bool useExistingState) : void
+~Step() constexpr = default : void
..
{static} -getLeakedObjectClassName() noexcept : const char *
+getNote() const : uint8_t
+getNoteLength() const : TimeDivision
+getNoteLengthInTicks() const : int
+getProbability() const : float
+getTimingOffset() const : float
+getTrackId() const : uint32_t
+getTriggerTick() const : int
+getVelocity() const : uint8_t
+isAffectedBySwing() const : bool
+isEnabled() const : bool
+setAffectedBySwing(const bool value) : void
+setEnabled(const bool value) : void
+setNote(const uint8_t value) : void
+setNoteLength(const TimeDivision value) : void
+setProbability(const float value) : void
+setTimingOffset(const float value) : void
+setTrackId(const uint32_t value) : void
+setTriggerTick(const int value) : void
+setVelocity(const uint8_t value) : void
__
-leakDetector136 : juce::LeakedObjectDetector<Step>
-props : Properties
}
class "Core::TypedProperty<bool>" as C_0015636944018152444051
class C_0015636944018152444051 {
__
}
class "Core::TypedProperty<uint8_t>" as C_0008116854928933620944
class C_0008116854928933620944 {
__
}
class "Core::TypedProperty<float>" as C_0009284858280421301190
class C_0009284858280421301190 {
__
}
class "Core::TypedProperty<int>" as C_0006974241629215312200
class C_0006974241629215312200 {
__
}
class "Core::TypedProperty<uint32_t>" as C_0006970304373437225449
class C_0006970304373437225449 {
__
}
class "Core::TypedProperty<Core::TimeDivision>" as C_0017115289922782562586
class C_0017115289922782562586 {
__
}
class "Core::Step::Properties" as C_0013792724424423021550
class C_0013792724424423021550 {
__
+affectedBySwing : TypedProperty<bool>
+enabled : TypedProperty<bool>
+note : TypedProperty<uint8_t>
+noteLength : TypedProperty<TimeDivision>
+probability : TypedProperty<float>
+timingOffset : TypedProperty<float>
+trackId : TypedProperty<uint32_t>
+triggerTick : TypedProperty<int>
+velocity : TypedProperty<uint8_t>
}
class "Core::TriggerBuffer" as C_0008651503874203565488
class C_0008651503874203565488 {
+operator=(const TriggerBuffer & other) : TriggerBuffer &
..
+addStep(int tick, size_t stepIndex) : void
+removeStep(size_t stepIndex) : void
+verifyIntegrity() const : bool
__
+dirty : std::atomic<bool>
+stepToTick : std::map<size_t,int>
+tickToStep : std::map<int,size_t>
}
class "Core::Pattern" as C_0003463039508841737728
class C_0003463039508841737728 {
+Pattern(ValueTree parentState, UndoManager & undoManagerToUse) : void
..
-calculateStepTick(size_t stepIndex) const : int
-ensureStepExists(size_t stepIndex) : void
{static} -getLeakedObjectClassName() noexcept : const char *
+getLength() const : size_t
+getStep(size_t stepIndex) const : Step &
+getStepEndTick(size_t stepIndex) const : int
+getStepInterval() const : TimeDivision
+getStepStartTick(size_t stepIndex) const : int
+getSwingAmount() const : float
+getTriggerMap() const : const std::map<int,size_t> &
-initializeStepTiming(size_t stepIndex) : void
+isStepEnabled(size_t stepIndex) const : bool
+setLength(size_t newLength) : void
+setStepEnabled(size_t stepIndex, bool enabled) : void
+setStepInterval(TimeDivision interval) : void
+setStepNote(size_t stepIndex, uint8_t note) const : void
+setStepNoteLength(size_t stepIndex, TimeDivision length) : void
+setStepOffset(size_t stepIndex, float offset) : void
+setStepProbability(size_t stepIndex, float probability) const : void
+setStepSwingAffected(size_t stepIndex, bool affected) : void
+setStepTrackId(size_t stepIndex, uint32_t trackId) : void
+setStepVelocity(size_t stepIndex, uint8_t velocity) const : void
+setSwingAmount(float amount) : void
-updateStepTiming(size_t stepIndex, bool acquireLock = false) : void
__
-activeBuffer : std::atomic<size_t>
-leakDetector74 : juce::LeakedObjectDetector<Pattern>
-props : Properties
-steps : std::vector<std::unique_ptr<Step>>
-triggerBuffers : std::array<TriggerBuffer,2>
-updateMutex : std::mutex
}
class "Core::Pattern::Properties" as C_0000741483992045270854
class C_0000741483992045270854 {
__
+length : TypedProperty<int>
+stepInterval : TypedProperty<TimeDivision>
+swingAmount : TypedProperty<float>
}
class "Core::Track" as C_0002654016251401955249
class C_0002654016251401955249 {
+Track(ValueTree parentState, UndoManager & undoManagerToUse, uint32_t id) : void
-Track(const Track &) = deleted : void
..
-operator=(const Track &) = deleted : Track &
..
-ensurePatternExists() : void
+getActiveSteps(int startTick, int numTicks) const : std::vector<std::pair<int,const Step *>>
+getCurrentPattern() const : Pattern &
+getId() const : uint32_t
{static} -getLeakedObjectClassName() noexcept : const char *
+getMidiChannel() const : uint8_t
+getScaleMode() const : ScaleMode
+getTrackInfo() const : TrackInfo
+setMidiChannel(uint8_t channel) : void
+setScaleMode(ScaleMode mode) : void
__
-currentPattern : std::unique_ptr<Pattern>
-leakDetector71 : juce::LeakedObjectDetector<Track>
-props : Properties
}
class "Core::TypedProperty<Core::ScaleMode>" as C_0002022822151375521290
class C_0002022822151375521290 {
__
}
class "Core::Track::Properties" as C_0018049369700593178350
class C_0018049369700593178350 {
__
+midiChannel : TypedProperty<uint8_t>
+scaleMode : TypedProperty<ScaleMode>
+trackId : TypedProperty<uint32_t>
}
class "Core::Sequencer" as C_0002016984366331843427
class C_0002016984366331843427 {
+Sequencer(ValueTree parentState, UndoManager & undoManagerToUse) : void
-Sequencer(const Sequencer &) = deleted : void
..
-operator=(const Sequencer &) = deleted : Sequencer &
..
+createTrack() : uint32_t
-generateTrackId() : uint32_t
+getCurrentPatternForTrack(uint32_t trackId) : Pattern &
+getGlobalCustomDegrees() const : const std::vector<uint8_t> &
{static} -getLeakedObjectClassName() noexcept : const char *
+getScaleRoot() const : uint8_t
+getScaleType() const : Scale::Type
+getSwingAmount() const : float
+getTimingManager() : TimingManager &
+getTrack(uint32_t trackId) : Track &
+getTrackCount() const : size_t
+getTracks() : std::vector<std::unique_ptr<Track>> &
+prepare(double sampleRate) : void
+processBlock(const juce::AudioPlayHead * playHead, int numSamples, juce::MidiBuffer & midiOut) : void
+removeTrack(uint32_t trackId) : bool
+setCustomScale(const std::vector<uint8_t> & degrees, uint8_t root) : void
+setScale(Scale::Type type, uint8_t root) : void
+setSwingAmount(float amount) : void
-updateTrackSwing() : void
__
-currentSampleRate : double
-globalCustomDegrees : std::vector<uint8_t>
-globalScale : Scale
-leakDetector71 : juce::LeakedObjectDetector<Sequencer>
-nextTrackId : uint32_t
-props : Properties
-scaleRoot : uint8_t
-scaleType : Scale::Type
-stepProcessor : StepProcessor
-timingManager : TimingManager
-tracks : std::vector<std::unique_ptr<Track>>
}
class "Core::Sequencer::Properties" as C_0014406921181289796232
class C_0014406921181289796232 {
__
+swingAmount : TypedProperty<float>
}
class "::AEffect" as C_0001801783519848301972
class C_0001801783519848301972 {
__
}
class "::__CFString" as C_0009576758060044126248
class C_0009576758060044126248 {
__
}
class "::ComponentInstanceRecord" as C_0014426228097136697117
class C_0014426228097136697117 {
__
}
C_0016821419841954520522 o-- C_0003593103974725905685 : -type
C_0003593103974725905685 --+ C_0016821419841954520522
C_0003828068192374320393 o-- C_0003161580071859362439 : +scaleMode
C_0008892747186919486775 ..> C_0014923543885965065796
C_0008892747186919486775 o-- C_0017162824566456018718 : +musicalPosition
C_0014923543885965065796 ..> C_0008892747186919486775
C_0014923543885965065796 o-- C_0017162824566456018718 : -musicalPosition
C_0007535760439577940486 ..> C_0017162824566456018718
C_0007535760439577940486 o-- C_0014923543885965065796 : -internalTransport
C_0007535760439577940486 o-- C_0008892747186919486775 : -currentTiming
C_0009130430079672521979 ..> C_0015922229309002665142
C_0009130430079672521979 ..> C_0003828068192374320393
C_0009130430079672521979 ..> C_0016821419841954520522
C_0009130430079672521979 o-- C_0009130430079672521979 : -leakDetector41
C_0007678414277767949348 ..> C_0013521205381721934084
C_0015922229309002665142 ..> C_0009414825008097351890
C_0015922229309002665142 o-- C_0013792724424423021550 : -props
C_0015922229309002665142 o-- C_0015922229309002665142 : -leakDetector136
C_0007678414277767949348 <|-- C_0015922229309002665142
C_0015636944018152444051 ..|> C_0013521205381721934084
C_0008116854928933620944 ..|> C_0013521205381721934084
C_0009284858280421301190 ..|> C_0013521205381721934084
C_0006974241629215312200 ..|> C_0013521205381721934084
C_0006970304373437225449 ..|> C_0013521205381721934084
C_0017115289922782562586 ..> C_0009414825008097351890
C_0017115289922782562586 ..|> C_0013521205381721934084
C_0013792724424423021550 --+ C_0015922229309002665142
C_0013792724424423021550 o-- C_0015636944018152444051 : +enabled
C_0013792724424423021550 o-- C_0008116854928933620944 : +note
C_0013792724424423021550 o-- C_0008116854928933620944 : +velocity
C_0013792724424423021550 o-- C_0009284858280421301190 : +probability
C_0013792724424423021550 o-- C_0009284858280421301190 : +timingOffset
C_0013792724424423021550 o-- C_0015636944018152444051 : +affectedBySwing
C_0013792724424423021550 o-- C_0006974241629215312200 : +triggerTick
C_0013792724424423021550 o-- C_0006970304373437225449 : +trackId
C_0013792724424423021550 o-- C_0017115289922782562586 : +noteLength
C_0003463039508841737728 ..> C_0009414825008097351890
C_0003463039508841737728 o-- C_0008651503874203565488 : -triggerBuffers
C_0003463039508841737728 o-- C_0000741483992045270854 : -props
C_0003463039508841737728 o-- C_0015922229309002665142 : -steps
C_0003463039508841737728 o-- C_0003463039508841737728 : -leakDetector74
C_0007678414277767949348 <|-- C_0003463039508841737728
C_0000741483992045270854 --+ C_0003463039508841737728
C_0000741483992045270854 o-- C_0006974241629215312200 : +length
C_0000741483992045270854 o-- C_0009284858280421301190 : +swingAmount
C_0000741483992045270854 o-- C_0017115289922782562586 : +stepInterval
C_0002654016251401955249 ..> C_0003161580071859362439
C_0002654016251401955249 ..> C_0003828068192374320393
C_0002654016251401955249 ..> C_0015922229309002665142
C_0002654016251401955249 o-- C_0018049369700593178350 : -props
C_0002654016251401955249 o-- C_0003463039508841737728 : -currentPattern
C_0002654016251401955249 o-- C_0002654016251401955249 : -leakDetector71
C_0007678414277767949348 <|-- C_0002654016251401955249
C_0002022822151375521290 ..> C_0003161580071859362439
C_0002022822151375521290 ..|> C_0013521205381721934084
C_0018049369700593178350 --+ C_0002654016251401955249
C_0018049369700593178350 o-- C_0006970304373437225449 : +trackId
C_0018049369700593178350 o-- C_0008116854928933620944 : +midiChannel
C_0018049369700593178350 o-- C_0002022822151375521290 : +scaleMode
C_0002016984366331843427 ..> C_0003463039508841737728
C_0002016984366331843427 o-- C_0014406921181289796232 : -props
C_0002016984366331843427 o-- C_0007535760439577940486 : -timingManager
C_0002016984366331843427 o-- C_0009130430079672521979 : -stepProcessor
C_0002016984366331843427 o-- C_0002654016251401955249 : -tracks
C_0002016984366331843427 o-- C_0016821419841954520522 : -globalScale
C_0002016984366331843427 o-- C_0003593103974725905685 : -scaleType
C_0002016984366331843427 o-- C_0002016984366331843427 : -leakDetector71
C_0007678414277767949348 <|-- C_0002016984366331843427
C_0014406921181289796232 --+ C_0002016984366331843427
C_0014406921181289796232 o-- C_0009284858280421301190 : +swingAmount

'Generated with clang-uml, version 0.6.0
'LLVM version Homebrew clang version 19.1.7
@enduml
